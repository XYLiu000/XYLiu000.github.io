<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-1701平均等待时间"><a href="#LeetCode-1701平均等待时间" class="headerlink" title="LeetCode-1701平均等待时间"></a>LeetCode-1701平均等待时间</h1><p>题目链接：<a href="https://leetcode.cn/problems/average-waiting-time/">1701. 平均等待时间 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">averageWaitingTime</span>(<span class="params">self, customers</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type customers: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        total=<span class="number">0</span>        <span class="comment">#记录总的等待时间    </span></span><br><span class="line">        time_now=<span class="number">0</span>    <span class="comment">#记录当前时间</span></span><br><span class="line">        n=<span class="built_in">len</span>(customers)       </span><br><span class="line">        wait=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): </span><br><span class="line">            wait.append(<span class="number">0</span>)          <span class="comment">#初始化</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:                       <span class="comment">#如果没有客人来，则平均等待时间为0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        time_now=customers[<span class="number">0</span>][<span class="number">0</span>]       <span class="comment">#否则，当前时间变为第一个客人到来的时间</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):        <span class="comment">#开始循环</span></span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">0</span>:                <span class="comment">#如果是第一个客人，他的等待时间就是做菜时间     当前时间就是当前时间加上做菜时间</span></span><br><span class="line">                time_now=time_now+customers[i][<span class="number">1</span>]</span><br><span class="line">                wait[<span class="number">0</span>]=customers[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> time_now&gt;=customers[i][<span class="number">0</span>]:     <span class="comment">#如果不是第一个客人，且做完菜时客人已经来了，则直接开始做菜，等待时间为做完菜时间-客人来的时间     当前时间为当前时间+做菜时间</span></span><br><span class="line">                time_now=time_now+customers[i][<span class="number">1</span>]</span><br><span class="line">                wait[i]=time_now-customers[i][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:         <span class="comment">#如果做完菜后 客人没有来， 则等客人来后则直接做菜，客人等待时间为做菜时间，当前时间就为，客人到来时间+做菜时间</span></span><br><span class="line">                time_now=customers[i][<span class="number">0</span>]+customers[i][<span class="number">1</span>]</span><br><span class="line">                wait[i]=customers[i][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):        <span class="comment">#做菜时间加起来</span></span><br><span class="line">            total=total+wait[i]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">float</span>(total)/n         <span class="comment">#返回浮点型数据</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LC-91-解码方法</title>
      <link href="/post/5.html"/>
      <url>/post/5.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-91-解码方法"><a href="#LeetCode-91-解码方法" class="headerlink" title="LeetCode-91 解码方法"></a>LeetCode-91 解码方法</h1><p>题目链接：<a href="https://leetcode.cn/problems/decode-ways/">91. 解码方法 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numDecodings</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        list_s=<span class="built_in">list</span>(s)</span><br><span class="line">        n=<span class="built_in">len</span>(list_s)</span><br><span class="line">        dp=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):<span class="comment">#初始化列表 创建一个长度为n+1的列表</span></span><br><span class="line">             dp.append(<span class="number">0</span>)  <span class="comment"># 向列表中添加元素 0</span></span><br><span class="line">        dp[n]=<span class="number">1</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;可有可无，但是常规的动态规划需要，这里写一下方便理解，本题中每个位置的值只与前面的两个位置有关。而对于最后一个位置（即 s[n-1])，由于它没有后一个数字可以与之拼接，所以其翻译方案数必定就是 1或0。&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> list_s[n-<span class="number">1</span>]==<span class="string">&#x27;0&#x27;</span>:<span class="comment"># 如果他是0，则没有解码方式</span></span><br><span class="line">            dp[n-<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            dp[n-<span class="number">1</span>]=<span class="number">1</span><span class="comment">#否则解码方式为1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):  <span class="comment">#从n-2 到0 递减  递减长度为-1</span></span><br><span class="line">            <span class="keyword">if</span>(list_s[i]==<span class="string">&#x27;0&#x27;</span>):     <span class="comment">#遇到0字符 这个字符的编码方式就为0并进入下次循环</span></span><br><span class="line">                 dp[i]=<span class="number">0</span></span><br><span class="line">                 <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            ans1=dp[i+<span class="number">1</span>]          <span class="comment">#如果不是0字符则判断是否小于等于26 满足就是 后边第二个的编码数和后边第一个编码数之和，否则就只是后边第一个的编码数</span></span><br><span class="line">            ans2=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">ord</span>(list_s[i])-<span class="number">48</span>)*<span class="number">10</span>+(<span class="built_in">ord</span>(list_s[i+<span class="number">1</span>])-<span class="number">48</span>)&lt;=<span class="number">26</span>:</span><br><span class="line">                ans2=dp[i+<span class="number">2</span>]</span><br><span class="line">            dp[i]=ans1+ans2</span><br><span class="line">        <span class="comment">#循环完成返回最前边的数的编码数，即总体的编码数</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LC-2108-找出数组中的第一个回文字符串</title>
      <link href="/post/4.html"/>
      <url>/post/4.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-2108-找出数组中的第一个回文字符串"><a href="#LeetCode-2108-找出数组中的第一个回文字符串" class="headerlink" title="LeetCode-2108 找出数组中的第一个回文字符串"></a>LeetCode-2108 找出数组中的第一个回文字符串</h1><p>题目链接：<a href="https://leetcode.cn/problems/find-first-palindromic-string-in-the-array/">2108. 找出数组中的第一个回文字符串 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstPalindrome</span>(<span class="params">self, words</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type words: List[str]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        now=<span class="string">&quot;&quot;</span>      <span class="comment">#用于返回</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(words) <span class="keyword">is</span> <span class="number">0</span> :   <span class="comment">#如果words列表中没有字符串，则直接返回空字符串</span></span><br><span class="line">            <span class="keyword">return</span> now</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> words:        <span class="comment">#否则遍历words列表</span></span><br><span class="line">            list_x=<span class="built_in">list</span>(x)     <span class="comment">#将遍历到的字符串转成单字符的列表</span></span><br><span class="line">            point=<span class="number">0</span>            <span class="string">&#x27;&#x27;&#x27;设置一个计数器，用于计算当前运算到列表中的第几项来判断是否进行完，如果进行完则该字符串符合要求，否则  就是中途有不符合的项。&#x27;&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_x)/<span class="number">2</span>):<span class="comment">#只用遍历一半即可</span></span><br><span class="line">                <span class="keyword">if</span> list_x[i]!=list_x[<span class="built_in">len</span>(list_x)-<span class="number">1</span>-i]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    point=point+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> point <span class="keyword">is</span> <span class="built_in">len</span>(list_x)/<span class="number">2</span>:</span><br><span class="line">                now=x</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> now</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LC-669-修剪二叉树</title>
      <link href="/post/3.html"/>
      <url>/post/3.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-669-修剪二叉树"><a href="#LeetCode-669-修剪二叉树" class="headerlink" title="LeetCode-669 修剪二叉树"></a>LeetCode-669 修剪二叉树</h1><p>题目链接：<a href="https://leetcode.cn/problems/trim-a-binary-search-tree/">669. 修剪二叉搜索树 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trimBST</span>(<span class="params">self, root, low, high</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type low: int</span></span><br><span class="line"><span class="string">        :type high: int</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        s=Solution() <span class="comment">#创建实例</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27; 检查根节点是否存在，如果不存在，则返回None（不是必需的，是用于处理某些特殊情况而添加的，例如在遍历一棵树的时候，你可能需要在递归到最后一个叶子节点后返回None，以便告诉调用方已经到达了书的底部，如果不进行这样的处理，在遍历到最后一个节点时，程序将抛出AttributeError错误）&#x27;&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> root.val&lt;low:<span class="comment">#如果当前根节点的值小于最小值，则只需判断当前节点的右节点</span></span><br><span class="line">            <span class="keyword">return</span> s.trimBST(root.right,low,high)</span><br><span class="line">        <span class="keyword">elif</span> root.val&gt;high: <span class="comment">#如果当前根节点的值大于最大值，则只需判断当前节点的左节点</span></span><br><span class="line">            <span class="keyword">return</span> s.trimBST(root.left,low,high)</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment">#如果当前值位于最小值与最大值之间，则递归的处理左子树和右子树以返回修建后的树</span></span><br><span class="line">            root.left=s.trimBST(root.left,low,high)</span><br><span class="line">            root.right=s.trimBST(root.right,low,high)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LC-203-移除链表元素</title>
      <link href="/post/2.html"/>
      <url>/post/2.html</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-203-移除链表元素"><a href="#LeetCode-203-移除链表元素" class="headerlink" title="LeetCode-203 移除链表元素"></a>LeetCode-203 移除链表元素</h1><p>题目链接：<a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElements</span>(<span class="params">self, head, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        head1=ListNode(<span class="number">0</span>) <span class="comment">#写一个listnode对象 值为0 next为 None</span></span><br><span class="line">        current=head1   <span class="comment"># 写一个current 也指向head1  便于后续添加</span></span><br><span class="line">        pointer=head  <span class="comment">#用于指向head</span></span><br><span class="line">        <span class="keyword">while</span> pointer <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> pointer.val!=val: <span class="comment">#如果值不相等</span></span><br><span class="line">                current.<span class="built_in">next</span>=ListNode(pointer.val)  <span class="comment">#将它赋给当前current的next</span></span><br><span class="line">                current=current.<span class="built_in">next</span> <span class="comment">#将当前current移位到next</span></span><br><span class="line">            pointer=pointer.<span class="built_in">next</span><span class="comment">#pointer移位到下一个</span></span><br><span class="line">        <span class="keyword">return</span> head1.<span class="built_in">next</span><span class="comment">#由于第一个值为0，循环也是从第二个开始，所以使用head1.next</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git push</title>
      <link href="/post/1.html"/>
      <url>/post/1.html</url>
      
        <content type="html"><![CDATA[<h1 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h1><p>git init 创建仓库</p><p>git add .</p><p>git commit -m ‘init’</p><p>git remote add origin <a href="https://github.com/seventeense/Memory.git">https://github.com/seventeense/Memory.git</a></p><p>git push origin master -u</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
