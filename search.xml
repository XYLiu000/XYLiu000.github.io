<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java</title>
      <link href="/post/1.html"/>
      <url>/post/1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java-学习笔记———————–1"><a href="#Java-学习笔记———————–1" class="headerlink" title="Java 学习笔记———————–1"></a>Java 学习笔记———————–1</h1><h3 id="第一个-Java-程序"><a href="#第一个-Java-程序" class="headerlink" title="第一个 Java 程序"></a>第一个 Java 程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>public static void main（String[] args）是 Java 程序固定的入口方法</p><p>javac 可以将该 .java 源码 编译 成.class 字节码</p><p>再使用 java 命令可以运行一个 java 程序 ，参数是类名</p><p><img src="C:\Users\18711\AppData\Roaming\Typora\typora-user-images\image-20220728154302502.png" alt="image-20220728154302502"></p><h2 id="Java-程序基础"><a href="#Java-程序基础" class="headerlink" title="Java 程序基础"></a>Java 程序基础</h2><h3 id="Java-程序基本结构"><a href="#Java-程序基本结构" class="headerlink" title="Java 程序基本结构"></a>Java 程序基本结构</h3><p>注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 可以用来自动创建文档的注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">注释结束</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>类名要求：习惯以大写字母开始 后接字母，数字和下划线的组合</p><p>如：NoteBook</p><p>类前不写 public 也能正常编译，但是这个类将无法从命令行执行</p><p>class 内部可以定义若干的方法（method）</p><p>java 入口程序必须是静态方法，方法名必须为 main，括号内的参数必须是 String 数组</p><p>方法名命名规则：首字母小写 main goodMoring</p><h3 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h3><h4 id="两种变量：基本类型的变量-和-引用类型的变量"><a href="#两种变量：基本类型的变量-和-引用类型的变量" class="headerlink" title="两种变量：基本类型的变量 和 引用类型的变量"></a>两种变量：基本类型的变量 和 引用类型的变量</h4><h5 id="基本类型的变量"><a href="#基本类型的变量" class="headerlink" title="基本类型的变量"></a>基本类型的变量</h5><p>在 java 中，变量必须先定义后使用，在定义变量的时候，可以给他一个初始值。</p><p>变量可以重新赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="number">100</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        x=<span class="number">200</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>整数类型：byte、short、int、long</li><li>浮点数类型：float、double</li><li>字符类型：char</li><li>布尔类型：boolean</li></ul><p>计算机内存最小的存储单元是字节（byte） 一个字节就是一个 8 位二进制数（8bit）</p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>除了上述基本类型的变量，剩下的都是引用类型</p><p>例如：String 字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s=<span class="string">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>引用类型类似于 C 语言的指针，它内部存储一个“地址”，指向某个对象在内存的位置。</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>定义变量的时候，如果加上 final 修饰符，这个变量就变成了常量</p><p><img src="C:\Users\18711\AppData\Roaming\Typora\typora-user-images\image-20220728161949320.png" alt="image-20220728161949320"></p><p>常量在定义时进行初始化后就不可再次赋值，再赋值会导致编译错误</p><p>常量名通常大写</p><h4 id="var-关键字"><a href="#var-关键字" class="headerlink" title="var 关键字"></a>var 关键字</h4><p>有些时候，类型的名字太长我，写起来比较麻烦。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br></pre></td></tr></table></figure><p>这个时候，如果想省略变量类型，可以使用 var 关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br></pre></td></tr></table></figure><p>编译器会根据赋值语句自动推算出变量 sb 的类型是 StringBuilder</p><h3 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h3><p>%取余</p><p>*乘法</p><p>&#x2F;除法 只得到整数部分</p><p>特别注意：整数的出发对于除数为 0 时运行时将报错，但是编译不会报错</p><h4 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h4><p>溢出不会报错，却会得到一个奇怪的结果</p><h4 id="自增-x2F-自减"><a href="#自增-x2F-自减" class="headerlink" title="自增 &#x2F;自减"></a>自增 &#x2F;自减</h4><p>++</p><p>–</p><h4 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h4><p><img src="C:\Users\18711\AppData\Roaming\Typora\typora-user-images\image-20220728163322807.png" alt="image-20220728163322807"></p><p>左移 29 位时，最高位变成 1，因此结果变成了负数。</p><p><img src="C:\Users\18711\AppData\Roaming\Typora\typora-user-images\image-20220728163434567.png" alt="image-20220728163434567"></p><p>如果对一个负数进行右移，最高位的 1 不动，结果仍然是一个负数</p><p>还有一种无符号的右移运算，使用&gt;&gt;&gt;，它的特点是不管符号位，右移后高位总是补 0，因此，对一个负数进行&gt;&gt;&gt;右移，它会变成正数，原因是最高位的 1 变成了 0</p><p>对 byte 和 short 进行移位时，会首先转换成 int 再进行位移</p><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><p>与：都为 1 才为 1</p><p>0&amp;0 0</p><p>0&amp;1 0</p><p>1&amp;0 0</p><p>1&amp;1 1</p><p>或：一个为 1 才为 1</p><p>1|0 1</p><p>1|1 1</p><p>0|1 1</p><p>0|0 0</p><p>非：0 与 1 互换</p><p>~0 1</p><p>~1 0</p><p>异或运算：如果两个数不同，结果为 1，否则为 0</p><p>0^0 0</p><p>0^1 1</p><p>1^0 1</p><p>1^1 0</p><h3 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h3><ul><li><code>()</code></li><li><code>!</code> <code>~</code> <code>++</code> <code>--</code></li><li><code>*</code> <code>/</code> <code>%</code></li><li><code>+</code> <code>-</code></li><li><code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>&gt;&gt;&gt;</code></li><li><code>&amp;</code></li><li><code>|</code></li><li><code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code></li></ul><h3 id="类型自动提升与强制转型"><a href="#类型自动提升与强制转型" class="headerlink" title="类型自动提升与强制转型"></a>类型自动提升与强制转型</h3><p>在运算过程中，如果参与运算的两个数的的类型不一致，那么计算结果为较大类型的整型。</p><p>例如：short 和 int 计算，结果总是 int，原因是 short 首先自动被转型为 int</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">12345</span>;</span><br><span class="line"><span class="type">short</span> s=(<span class="type">short</span>) i;</span><br></pre></td></tr></table></figure><p>强转可能出错</p><h2 id="浮点数运算"><a href="#浮点数运算" class="headerlink" title="浮点数运算"></a>浮点数运算</h2><p>只能做加减乘除这些数值计算，不能做位运算和移位运算</p><p>范围大但是无法精确表示</p><p>存在运算误差，所以比较两个浮点数是否相等常常会出现错误的结果</p><p>正确的比较方法是判断两个浮点数之差的绝对值是否小于一个很小的数：</p><p><img src="C:\Users\18711\AppData\Roaming\Typora\typora-user-images\image-20220728165348164.png" alt="image-20220728165348164"></p><h3 id="类型提升："><a href="#类型提升：" class="headerlink" title="类型提升："></a>类型提升：</h3><p>如果参与运算的两个数其中一个是整型，那么整型可以自动提升到浮点型</p><p>需要注意的是啊，在一个复杂的四则运算中，两个整数的运算不会出现自动提升的情况</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> d=<span class="number">1.2</span>+<span class="number">24</span>/<span class="number">5</span>;  <span class="comment">//5.2</span></span><br></pre></td></tr></table></figure><h3 id="溢出-1"><a href="#溢出-1" class="headerlink" title="溢出"></a>溢出</h3><p>整数运算在除 0 时会报错，而浮点数运算在除数为 0 时不会报错，但会返回几个特殊值：</p><ul><li>NaN 表示 Not a Number</li><li>Infinity 表示无穷大</li><li>-Infinity 表示负无穷大</li></ul><h3 id="强制转型"><a href="#强制转型" class="headerlink" title="强制转型"></a>强制转型</h3><p>如果要进行四舍五入，可以对浮点数加上 0.5 再强制转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">     <span class="type">double</span> d=<span class="number">2.6</span>;</span><br><span class="line">     <span class="type">int</span> n=(<span class="type">int</span>)(d+<span class="number">0.5</span>);</span><br><span class="line">     System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="C:\Users\18711\AppData\Roaming\Typora\typora-user-images\image-20220728170413542.png" alt="image-20220728170413542"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Hello &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        double a=1.0;</span><br><span class="line">        double b=3.0;</span><br><span class="line">        double c=-4.0;</span><br><span class="line">    double x=(-b+Math.sqrt(b*b-4*a*c))/2*a;</span><br><span class="line">    double y=-(-b+Math.sqrt(b*b-4*a*c))/2*a;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h2><p>boolean 永远只有 true 和 false 两个值</p><p>布尔值是一种关系运算，包括以下几类：</p><ul><li>比较运算符：<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code>，<code>==</code>，<code>!=</code></li><li>与运算 <code>&amp;&amp;</code></li><li>或运算 <code>||</code></li><li>非运算 <code>!</code></li></ul><h3 id="短路问题"><a href="#短路问题" class="headerlink" title="短路问题"></a>短路问题</h3><p>如果一个布尔运算的表达式能够提前确定结果，则后续的计算不再执行，直接返回结果</p><p>false&amp;&amp;x 的结果总是 false，无论 x 是 true 还是 false，因此，与运算在确定第一个值为 false 后，不再继续计算，而是直接返回 false</p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>b？x：y</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="type">int</span> n=-<span class="number">100</span>;</span><br><span class="line">       <span class="type">int</span> x=n&gt;=<span class="number">0</span>?n:-n;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>判断指定年龄是否是小学生（6~12 岁）：</p><h2 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h2><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>char 基本数据类型</p><p>它是 character 的缩写</p><p>一个 char 保存一个 Unicode 字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c1=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">char</span> c2=<span class="string">&#x27;中&#x27;</span>;</span><br></pre></td></tr></table></figure><p>一个英文字符和一个中文字符都用一个 char 类型表示，它们都占用两个字节。</p><p>要显示一个字符的 Unicode 编码，只需要将 char 类型直接赋值给 int 类型即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n1=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">int</span> n2=<span class="string">&#x27;中&#x27;</span>;</span><br></pre></td></tr></table></figure><p>还可以直接用转义字符\u+Unicode 编码来表示一个字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c3=<span class="string">&#x27;\u0041&#x27;</span>;</span><br><span class="line"><span class="type">char</span> c4=<span class="string">&#x27;\u4e2d&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>和 char 类型不同，字符串类型 String 是引用类型，我们用双引号”…“表示字符串。</p><p>一个字符串可以存储 0 个到任意个字符</p><p>转义字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s=<span class="string">&quot;abc\&quot;xyz&quot;</span>;</span><br></pre></td></tr></table></figure><p>常见的转义字符包括：</p><ul><li><code>\&quot;</code> 表示字符<code>&quot;</code></li><li><code>\&#39;</code> 表示字符<code>&#39;</code></li><li><code>\\</code> 表示字符<code>\</code></li><li><code>\n</code> 表示换行符</li><li><code>\r</code> 表示回车符</li><li><code>\t</code> 表示 Tab</li><li><code>\u####</code> 表示一个 Unicode 编码的字符</li></ul><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><p>Java 的编译器对字符串做了特殊照顾，可以使用+连接任意字符串和其它数据类型，这样极大地方便了字符串的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        String s1=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String s2=<span class="string">&quot;World&quot;</span>;</span><br><span class="line">        String s=s1+<span class="string">&quot;  &quot;</span>+s2+<span class="string">&quot;!&quot;</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用+连接字符串和其他数据类型，会将其他数据类型先自动转型为字符串，再连接</p><h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Hello &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">       String s= &quot;&quot;&quot;</span><br><span class="line">               Select</span><br><span class="line">               s</span><br><span class="line">               as</span><br><span class="line">               &quot;&quot;&quot;;</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用”””…”””</p><h3 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h3><p>Java 字符串除了是一个引用类型外，还有个重要特点，就是字符串不可变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        System.out.println(s); <span class="comment">// 显示 hello</span></span><br><span class="line">        s = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">        System.out.println(s); <span class="comment">// 显示 world</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察执行结果，难道字符串 s 变了吗？其实变的不是字符串，而是变量 s 的“指向。</p><p>执行<code>String s = &quot;hello&quot;;</code>时，JVM 虚拟机先创建字符串<code>“hello”</code>，然后，把字符串变量 s 指向它</p><p>紧接着，执行<code>s = &quot;world&quot;;</code>时，JVM 虚拟机先创建字符串<code>“world”</code>，然后，把字符串变量 s 指向它</p><p>原来的字符串<code>“hello”</code>还在，只是我们无法通过变量 s 访问它而已。</p><p>因此，字符串的不可变是指字符串内容不可变，至于变量，可以一会指向字符串<code>“hello”</code>，一会指向字符串<code>“world”</code>。</p><h3 id="空值-null"><a href="#空值-null" class="headerlink" title="空值 null"></a>空值 null</h3><p>引用类型的变量可以指向一个空置 null，他表示不存在，即该变量不指向任何对象。</p><p>null 不是空字符串</p><p>null 不等于“”</p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><p>请将一组 int 值视为字符的 Unicode 编码，然后将它们拼成一个字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">72</span>,b=<span class="number">105</span>,c=<span class="number">65281</span>;</span><br><span class="line">        String s=<span class="number">72</span>+<span class="string">&quot;&quot;</span>+<span class="number">105</span>+<span class="string">&quot;&quot;</span>+<span class="number">65281</span>+<span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] ns=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">ns[<span class="number">0</span>]=<span class="number">68</span>;</span><br><span class="line">ns[<span class="number">1</span>]=<span class="number">79</span>;</span><br><span class="line">ns[<span class="number">2</span>]=<span class="number">91</span>;</span><br></pre></td></tr></table></figure><p>定义一个数组类型的变量，使用数组类型“类型[]”,例如，int[].</p><p>和单个基本类型变量不同，数组变量初始化必须使用 new int[5]表示创建一个可容纳 5 个 int 元素的数组。</p><p>特点：</p><ul><li>数组所有元素初始化为默认值，整型都是 0，浮点型是 0.0，布尔型是 false；</li><li>数组一旦创建后，大小就不可改变。</li></ul><p>可以使用<code>数组变量.length</code>获取数组大小</p><p>可以在定义数组时直接指定初始化的元素，这样就不必写出数组大小，而是由编译器自动推算数组大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] ns=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">68</span>,<span class="number">79</span>,<span class="number">91</span>,<span class="number">55</span>,<span class="number">56</span>&#125;;</span><br><span class="line"><span class="comment">//进一步简写:</span></span><br><span class="line"><span class="type">int</span>[] ns=&#123;<span class="number">99</span>,<span class="number">99</span>,<span class="number">94</span>,<span class="number">1454</span>,<span class="number">51</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><p>在前面的代码中，我们总是用<code>System.out.println()</code>来向屏幕输出一些内容。</p><p><code>println</code>是 print line 的缩写，表示输出并换行。因此，如果输出后不想换行，可以用 <code>print()</code></p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>12900000 1.29E7</p><p>使用<code>printf()</code>通过使用%？ ，printf() 可以把后面的参数格式化成指定格式</p><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%d</td><td>格式化输出整数</td></tr><tr><td>%x</td><td>格式化输出十六进制整数</td></tr><tr><td>%f</td><td>格式化输出浮点数</td></tr><tr><td>%e</td><td>格式化输出科学计数法表示的浮点数</td></tr><tr><td>%s</td><td>格式化字符串</td></tr></tbody></table><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>首先，我们通过<code>import</code>语句导入<code>java.util.Scanner</code>，<code>import</code>是导入某个类的语句，必须放到 Java 源代码的开头，后面我们在 Java 的<code>package</code>中会详细讲解如何使用<code>import</code>。</p><p>然后，创建<code>Scanner</code>对象并传入<code>System.in</code>。<code>System.out</code>代表标准输出流，而<code>System.in</code>代表标准输入流。直接使用<code>System.in</code>读取用户输入虽然是可以的，但需要更复杂的代码，而通过<code>Scanner</code>就可以简化后续的代码。</p><p>有了<code>Scanner</code>对象后，要读取用户输入的字符串，使用<code>scanner.nextLine()</code>，要读取用户输入的整数，使用<code>scanner.nextInt()</code>。<code>Scanner</code>会自动转换数据类型，因此不必手动转换。</p><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><p>请帮小明同学设计一个程序，输入上次考试成绩（int）和本次考试成绩（int），然后输出成绩提高的百分比，保留两位小数位（例如，21.75%）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入上次考试成绩&quot;</span>);</span><br><span class="line">        <span class="type">int</span> s1=scanner.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入本次考试成绩&quot;</span>);</span><br><span class="line">        <span class="type">int</span> s2=scanner.nextInt();</span><br><span class="line">        System.out.println(s1+<span class="string">&quot; &quot;</span>+s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if-判断-同-c-x2F-c"><a href="#if-判断-同-c-x2F-c" class="headerlink" title="if 判断 同 c&#x2F;c++"></a>if 判断 同 c&#x2F;c++</h2><h2 id="switch-多重选择"><a href="#switch-多重选择" class="headerlink" title="switch 多重选择"></a>switch 多重选择</h2><p>注意新语法使用-&gt;，如果有多条语句，需要用{}括起来。不要写 break 语句</p><p>因为新语法只会执行匹配的语句，没有穿透效应。</p><p>很多时候，我们还可能用 switch 语句给某个变量赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        String fruit=<span class="string">&quot;apple&quot;</span>;</span><br><span class="line">        <span class="type">int</span> opt=<span class="keyword">switch</span> (fruit)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;apple&quot;</span>-&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;pear&quot;</span>,<span class="string">&quot;mango&quot;</span>-&gt;<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="number">0</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h5><p>如果需要复杂的语句，我们也可以写很多语句，放到{…}里，然后，用 yield 返回一个值作为 switch 语句的返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        String fruit=<span class="string">&quot;apple&quot;</span>;</span><br><span class="line">        <span class="type">int</span> opt=<span class="keyword">switch</span> (fruit)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;apple&quot;</span>-&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;pear&quot;</span>,<span class="string">&quot;mango&quot;</span>-&gt;<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">                <span class="type">int</span> code=fruit.hashCode();</span><br><span class="line">                yield code;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h3><p>使用<code>switch</code>实现一个简单的石头、剪子、布游戏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入剪刀石头布2/0/5： &quot;</span>);</span><br><span class="line">        <span class="type">int</span> p=scanner.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (p)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>-&gt;&#123;System.out.println(<span class="string">&quot;平局&quot;</span>);&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>-&gt;&#123;System.out.println(<span class="string">&quot;输了&quot;</span>);&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>-&gt;&#123;System.out.println(<span class="string">&quot;赢了&quot;</span>);&#125;</span><br><span class="line">            <span class="keyword">default</span> -&gt; &#123;System.out.println(<span class="string">&quot;看清题&quot;</span>);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h3 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h3><p>使用<code>do while</code>循环计算从<code>m</code>到<code>n</code>的和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">while</span> (m&lt;=n)&#123;</span><br><span class="line">        sum+=m;</span><br><span class="line">        m++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h2><h3 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h3><p>使用<code>do while</code>循环计算从<code>m</code>到<code>n</code>的和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">        sum+=m;</span><br><span class="line">        m++;</span><br><span class="line">        &#125;<span class="keyword">while</span> (m&lt;=n);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><h3 id="for-each-循环"><a href="#for-each-循环" class="headerlink" title="for each 循环"></a>for each 循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> n:ns)&#123;</span><br><span class="line">System.out.println(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for each 循环的变量 n 不再是计数器，而是直接对应到数组的每个元素。for each 循环的写法也更简洁。但是，for each 循环无法指定循环遍历的顺序，也无法获取数组的索引。</p><p>除了数组外，for each 循环能够遍历所有“可迭代”的数据类型。</p><h3 id="练习-7"><a href="#练习-7" class="headerlink" title="练习"></a>练习</h3><p>给定一个数组，请用<code>for</code>循环倒序输出每一个元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] ns=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n:ns)&#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\18711\AppData\Roaming\Typora\typora-user-images\image-20220728213242925.png" alt="image-20220728213242925"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">double</span> pi=<span class="number">0.0</span>;</span><br><span class="line">        <span class="type">double</span> sum=<span class="number">0.0</span>;</span><br><span class="line">        <span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">double</span> i=<span class="number">1.0</span>;i&lt;<span class="number">1000.0</span>;i=i+<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">            sum+=p*(<span class="number">1.0</span>/i);</span><br><span class="line"></span><br><span class="line">            p=p*(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pi=sum*<span class="number">4</span>;</span><br><span class="line">        System.out.println(pi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break continue"></a>break continue</h3><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>for 和 for each</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] ns=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n:ns)&#123;</span><br><span class="line">            sum+=n;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] ns=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习-8"><a href="#练习-8" class="headerlink" title="练习"></a>练习</h3><p>请按倒序遍历数组并打印每个元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] ns=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">4</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(ns[i]);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ns = &#123; <span class="number">28</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">73</span>, <span class="number">65</span>, <span class="number">18</span>, <span class="number">96</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">36</span> &#125;;</span><br><span class="line">        <span class="comment">// 排序前:</span></span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ns.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">              <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;ns.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                  <span class="keyword">if</span>(ns[j]&gt;ns[j+<span class="number">1</span>])&#123;</span><br><span class="line">                  <span class="type">int</span> temp=ns[j];</span><br><span class="line">                  ns[j]=ns[j+<span class="number">1</span>];</span><br><span class="line">                  ns[j+<span class="number">1</span>]=temp;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ns = &#123; <span class="number">28</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">73</span>, <span class="number">65</span>, <span class="number">18</span>, <span class="number">96</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">36</span> &#125;;</span><br><span class="line">        Arrays.sort(ns);</span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>二维数组就是数组的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] ns=&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(ns));</span><br></pre></td></tr></table></figure><h3 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h3><p>三维数组就是二维数组的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][][] ns=&#123;</span><br><span class="line">&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">11</span>&#125;,</span><br><span class="line">&#123;<span class="number">12</span>,<span class="number">13</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>&#125;,</span><br><span class="line">&#123;<span class="number">17</span>,<span class="number">18</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>Java 程序的入口是 main 方法，而 main 方法可以接受一个命令行参数，它是一个 String[] 数组。</p><p>这个命令行参数由 JVM 接收用户输入并传给 main 方法</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] names;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNames</span><span class="params">(String... names)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.names=names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Group g=<span class="keyword">new</span> <span class="title class_">Group</span>();</span><br><span class="line">g.setNames(<span class="string">&quot;Xiao Ming&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] names;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNames</span><span class="params">(String[] names)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.names=names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Group g=<span class="keyword">new</span> <span class="title class_">Group</span>();</span><br><span class="line">g.setNames(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;Xiao Ming&quot;</span>,<span class="string">&quot;aaa&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//可以传入null，而可变参数可以保证无法传入null，因为传入0个参数时，接收到的实际是一个空数组而不是null。</span></span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>初始化</p><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是面向对象编程中非常强大的一种机制，它首先可以复用代码。当我们让 Student 从 Person 继承时，Student 就获得了 Person 的所有功能，我们只需要为 Student 编写新增的功能。</p><p>extends</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过继承，Student 只需要编写额外的功能，不再需要重复代码。</p><p>子类自动获得了父类的所有字段，严禁定义与父类重名的字段！</p><p>任何类，除了 object，都会继承自某个类。</p><p>Java 只允许一个 class 继承自一个类，因此一个类有且只有一个父类。只有一个 object 特殊，它没有父类。</p><p>子类无法访问父类的 private 字段或方法</p><p>用 protected 修饰的字段可以被子类访问</p><h3 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h3><p>表示父类（超类）</p><p>子类引用父类的字段时，可以用 super.fieldName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,&quot;</span>+<span class="built_in">super</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果父类没有默认的构造方法，子类就必须显示调用 super()并给出参数以便让编译器定位到父类的一个合适的构造方法。</p><p>子类默认的构造方法是编译器自动生成的，不是继承的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>snow</title>
      <link href="/post/36630.html"/>
      <url>/post/36630.html</url>
      
        <content type="html"><![CDATA[<p>Snow</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12501/640" alt="图片"></h2>]]></content>
      
      
      <categories>
          
          <category> picture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git push</title>
      <link href="/post/1.html"/>
      <url>/post/1.html</url>
      
        <content type="html"><![CDATA[<h1 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h1><p>git init 创建仓库</p><p>git add .</p><p>git commit -m ‘init’</p><p>git remote add origin <a href="https://github.com/seventeense/Memory.git">https://github.com/seventeense/Memory.git</a></p><p>git push origin master -u</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/16107.html"/>
      <url>/post/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>夏令营</title>
      <link href="/post/2.html"/>
      <url>/post/2.html</url>
      
        <content type="html"><![CDATA[<h1 id="2022-06-28-作业"><a href="#2022-06-28-作业" class="headerlink" title="2022-06-28 作业"></a>2022-06-28 作业</h1><h2 id="作业-1"><a href="#作业-1" class="headerlink" title="作业 1"></a>作业 1</h2><h3 id="编写一个写输入为一个数组，返回数组方差和均值的函数："><a href="#编写一个写输入为一个数组，返回数组方差和均值的函数：" class="headerlink" title="编写一个写输入为一个数组，返回数组方差和均值的函数："></a>编写一个写输入为一个数组，返回数组方差和均值的函数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    var = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        <span class="built_in">sum</span> += i</span><br><span class="line">    avg = <span class="built_in">sum</span> / <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        var = var + (avg - i) ** <span class="number">2</span></span><br><span class="line">    var = var / <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">return</span> avg, var</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">56</span>, <span class="number">43</span>, <span class="number">7</span>]</span><br><span class="line">    avg, var = fun(a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;avg=&#123;:.2f&#125;,var=&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(avg, var))</span><br></pre></td></tr></table></figure><h2 id="作业-2"><a href="#作业-2" class="headerlink" title="作业 2"></a>作业 2</h2><h3 id="第一题代码中的-name-39-main-39-format-分别是什么意思"><a href="#第一题代码中的-name-39-main-39-format-分别是什么意思" class="headerlink" title="第一题代码中的__name__,&#39;__main__&#39;,format 分别是什么意思"></a>第一题代码中的<code>__name__,&#39;__main__&#39;,format</code> 分别是什么意思</h3><h4 id="name-："><a href="#name-：" class="headerlink" title="__name__ ："></a><code>__name__ </code>：</h4><p>是一个全局的内置变量</p><p>当我们用 Python 写了一个脚本，当我们既希望这个脚本可以单独运行，同样希望它可以在其他的脚本中发挥作用。这个时候就需要考虑使用<code>__name__</code>了。</p><h4 id="39-main-39"><a href="#39-main-39" class="headerlink" title="&#39;__main__&#39;:"></a><code>&#39;__main__&#39;</code>:</h4><p>确保只有单独运行该模块时，此表达式才成立，才可进入此判断语法，执行其中的测试代码；反之，如果只是作为模块导入到其他程序文件中，则此表达式将不成立，运行其他程序时，也就不会执行该判断语句中的测试代码。</p><h4 id="format："><a href="#format：" class="headerlink" title="format："></a><code>format</code>：</h4><p>format() 是一个函数，该函数把字符串当成一个模板，通过传入的参数进行格式化，并使用’{}‘作为特殊字符替代’%‘</p><p>例如我们用’%‘字符来写本题就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;avg=%.2f,var=%.2f&#x27;</span>%(avg,var))</span><br></pre></td></tr></table></figure><p>format 两种使用方式：</p><p>例如本题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;avg=&#123;:.2f&#125;,var=&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(avg, var))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;avg=<span class="subst">&#123;avg:<span class="number">.2</span>f&#125;</span>,var=<span class="subst">&#123;var:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="作业-3"><a href="#作业-3" class="headerlink" title="作业 3"></a>作业 3</h2><h4 id="了解什么是-pip，什么是-numpy-，并用-pip-下载-numpy，你遇到了什么问题？请在网上寻找教程解决之。"><a href="#了解什么是-pip，什么是-numpy-，并用-pip-下载-numpy，你遇到了什么问题？请在网上寻找教程解决之。" class="headerlink" title="了解什么是 pip，什么是 numpy ，并用 pip 下载 numpy，你遇到了什么问题？请在网上寻找教程解决之。"></a>了解什么是 pip，什么是 numpy ，并用 pip 下载 numpy，你遇到了什么问题？请在网上寻找教程解决之。</h4><h4 id="pip："><a href="#pip：" class="headerlink" title="pip："></a>pip：</h4><p>pip 是 Python 包管理工具，该工具提供了对 Python 包的查找、下载、安装、卸载的功能。</p><p>目前我的版本是 3.8.10 已经自带了 pip 工具</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12501/image-20220629001115360.png"></p><h4 id="numpy："><a href="#numpy：" class="headerlink" title="numpy："></a>numpy：</h4><p>NumPy（Numerical Python）是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵 运算，此外也针对数组运算提供大量的数学函数库。</p><p>NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p><ul><li>一个强大的 N 维数组对象 ndarray</li><li>广播功能函数</li><li>整合 C&#x2F;C++&#x2F;Fortran 代码的工具</li><li>线性代数、傅里叶变换、随机数生成等功能</li></ul><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h5><p>出现了 pip 不是最新版本的警告</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12501/image-20220629002529981.png" alt="image-20220629002529981"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>输入这个语句可以解决</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12501/image-20220629002547679.png" alt="image-20220629002547679"></p><p>再输入一次 pip install numpy 看是否成功</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12501/image-20220629002703970.png" alt="image-20220629002703970"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
